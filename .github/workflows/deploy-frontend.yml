# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the master branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.


name: Deploy Frontend to Amazon ECR

on:
  push:
    branches:
      - aws-dev
    paths:
      aws/frontend/**

defaults:
  run:
    working-directory: aws/frontend

env:
  AWS_REGION: eu-west-1
  IAM_ROLE: ${{ secrets.AWS_IAM_ROLE }}
  # ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_FRONTEND_APP }}
  IMAGE_TAG: dev

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.IAM_ROLE }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        # IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push to ECR
        docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ IMAGE_TAG }} .
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ IMAGE_TAG }}
        echo "Successfully pushed ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ IMAGE_TAG }}"
