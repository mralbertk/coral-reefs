name: Deploy Image Reframing Code & Refresh Lambda Function

on:
  workflow_dispatch:
  push:
    branches:
      - aws-dev
    paths:
      - aws/workers/image-rotate-crop/**

defaults:
  run:
    working-directory: aws/workers/image-rotate-crop/app

env:
  AWS_REGION: eu-west-1
  IAM_ROLE: ${{ secrets.AWS_IAM_ROLE }}
  ECR_REPOSITORY: ${{ secrets.ECR_REFRAMING_LAMBDA }}
  IMAGE_TAG: dev
  LAMBDA_FUNC: ${{ secrets.LAMBDA_IMAGE_REFRAMING }}

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: aws-dev

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.IAM_ROLE }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        echo "Successfully pushed ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:dev"

    - name: Update Lambda function with latest ECR image
      run: |
        aws lambda update-function-code \
        --function-name ${{ env.LAMBDA_FUNC }} \
        --image-uri ${{ steps.build-image.outputs.image }}
